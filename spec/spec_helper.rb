require 'bundler'
Bundler.setup

require 'fileutils'
require 'logger'
require 'pathname'

ENV['RAILS_ENV'] = 'test'

SPEC_DIR = Pathname.new File.dirname(__FILE__)
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))
$LOAD_PATH.unshift(File.dirname(__FILE__))

require 'active_record'
require 'active_record/fixtures'
require 'active_support/test_case'

require 'delorean'
require 'ruby-debug' if RUBY_VERSION.to_f < 1.9

DB_ADAPTER = ENV['ARE_DB'] || 'sqlite3'

FileUtils.mkdir_p 'log'
ActiveRecord::Base.logger = Logger.new('log/spec.log')
ActiveRecord::Base.logger.level = Logger::DEBUG
ActiveRecord::Base.configurations['test'] = YAML.load_file(SPEC_DIR.join('database.yml'))[DB_ADAPTER]

require 'activerecord-import'
ActiveRecord::Base.establish_connection 'test'

ActiveSupport::Notifications.subscribe(/active_record.sql/) do |event, _, _, _, hsh|
  ActiveRecord::Base.logger.info hsh[:sql]
end

require 'factory_girl'
Dir[File.dirname(__FILE__) + '/shared_examples/**/*.rb'].each{ |file| require file }
Dir[File.dirname(__FILE__) + '/support/**/*.rb'].each{ |file| require file }

# Load base/generic schema
require SPEC_DIR.join('schema/version')
require SPEC_DIR.join('schema/generic_schema')
DB_ADAPTER_schema = SPEC_DIR.join("schema/#{DB_ADAPTER}_schema.rb")
require DB_ADAPTER_schema if File.exists?(DB_ADAPTER_schema)

# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  config.treat_symbols_as_metadata_keys_with_true_values = true
  config.run_all_when_everything_filtered = true

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'

  config.around(:each) do |example, options|
    ActiveRecord::Base.transaction do
      example.run
      raise ActiveRecord::Rollback
    end
  end

  config.filter_run_including :adapter => DB_ADAPTER.to_sym
end
